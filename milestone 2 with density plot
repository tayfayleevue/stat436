library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(caret)

diabetes_data <- read.csv("https://uwmadison.box.com/shared/static/k6ph975j7qifhhxbcebzw0zirsol39yv")

diabetes_data <- diabetes_data %>%
  filter(across(c(Glucose, BloodPressure, SkinThickness, Insulin, BMI, Age, DiabetesPedigreeFunction), ~ . != 0)) %>%
  mutate(Outcome = factor(Outcome, levels = c(0, 1), labels = c("Non-Diabetic", "Diabetic")))

model <- glm(Outcome ~ Age + Pregnancies + BMI + Glucose, data = diabetes_data, family = "binomial")

# UI
ui <- fluidPage(
  titlePanel("Type 2 Diabetes Risk Interface"),
  
  fluidRow(
    column(12, 
           h3("Understanding Diabetes and the Dataset"),
           tags$p("This app uses data on various health metrics to assess diabetes risk and provide insights. 
                  The dataset is based on individuals of Pima Indian heritage, examining attributes like age, 
                  BMI, and glucose levels to identify potential diabetes risk factors.")
    )
  ),
  
  # Tabbed layout for visualizations and risk calculator
  tabsetPanel(
    tabPanel("Visualizations",
             sidebarLayout(
               sidebarPanel(
                 h4("Interactive Visualizations"),
                 selectInput("feature", "Select Feature:", 
                             choices = c("BMI", "Glucose", "BloodPressure", "Age"))
               ),
               mainPanel(
                 fluidRow(
                   column(6, plotlyOutput("boxPlot")), 
                   column(6, plotlyOutput("histPlot")) 
                 ),
                 fluidRow(
                   column(12, plotlyOutput("pregnancyDensityPlot"))
                 )
               )
             )
    ),
    
    tabPanel("Diabetes Risk Calculator",
             sidebarLayout(
               sidebarPanel(
                 width = 6,
                 h4("Risk Calculator"),
                 numericInput("input_age", "Age:", 30, min = 1, max = 120),
                 numericInput("input_pregnancies", "Number of Pregnancies:", 1, min = 0),
                 numericInput("input_BMI", "BMI: (Don't know your BMI? Calculate at https://www.calculator.net/bmi-calculator.html)", 25, min = 0),
                 numericInput("input_glucose", "Glucose Level: (from 0 to 199)", 100, min = 0, max = 199),
                 actionButton("calc_risk", "Calculate Diabetes Risk")
               ),
               mainPanel(
                 width = 6,
                 h4("Estimated Diabetes Risk:"),
                 textOutput("riskOutput")
               )
             )
    )
  )
)

# Server
server <- function(input, output) {
  # Boxplot Visualization
  output$boxPlot <- renderPlotly({
    feature <- input$feature
    p <- ggplot(diabetes_data, aes(x = Outcome, y = .data[[feature]], fill = Outcome)) +
      geom_boxplot() +
      labs(
        title = paste("Boxplot of", feature, "by Diabetic Status"),
        x = "Diabetes Status",
        y = feature,
        fill = "Diabetes Status"
      ) +
      scale_fill_manual(
        values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
      ) +
      theme_minimal() + 
      theme(legend.position = "bottom", 
            plot.title = element_text(size = 12))
    
    ggplotly(p)
  })
  
  # Histogram with Density Plot
  output$histPlot <- renderPlotly({
    feature <- input$feature
    p <- ggplot(diabetes_data, aes_string(x = feature, fill = "Outcome")) +
      geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5, bins = 30) +
      geom_density(alpha = 0.7) +
      labs(
        title = paste("Distribution of", feature, "by Diabetic Status"),
        x = feature,
        y = "Density",
        fill = "Diabetes Status"
      ) +
      scale_fill_manual(
        values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
      ) +
      theme_minimal() + 
      theme(legend.position = "bottom", 
            plot.title = element_text(size = 12))
    
    ggplotly(p)
  })
  
  # Create a density plot for the number of pregnancies
  output$pregnancyDensityPlot <- renderPlotly({
  p <- ggplot(diabetes_data, aes(x = Pregnancies, fill = Outcome)) +
    geom_density(alpha = 0.6) +
    labs(
      title = "Distribution of Number of Pregnancies by Diabetic Status",
      x = "Number of Pregnancies",
      y = "Density",
      fill = "Diabetes Status"
    ) +
    scale_fill_manual(
      values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
    ) +
    theme_minimal() +
    theme(
      legend.position = "bottom",
      plot.title = element_text(size = 12)
    )
  
  ggplotly(p)
})


  
  # Risk Calculation based on user input
  observeEvent(input$calc_risk, {
    new_data <- data.frame(
      Age = input$input_age,
      Pregnancies = input$input_pregnancies,
      BMI = input$input_BMI,
      Glucose = input$input_glucose
    )
    
    # Predict probability
    risk <- predict(model, newdata = new_data, type = "response")
    output$riskOutput <- renderText({
      paste0("Your estimated risk of diabetes is ", round(risk * 100, 2), "%.")
    })
  })
}

shinyApp(ui = ui, server = server)
