library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(caret)  # For logistic regression model

# Load and preprocess dataset
diabetes_data <- read_csv("https://uwmadison.box.com/shared/static/k6ph975j7qifhhxbcebzw0zirsol39yv")

# Remove rows where columns other than Pregnancies and Outcome contain 0 values
diabetes_data <- diabetes_data %>%
  filter(across(c(Glucose, BloodPressure, SkinThickness, Insulin, BMI, Age, DiabetesPedigreeFunction), ~ . != 0)) %>%
  mutate(Outcome = factor(Outcome, levels = c(0, 1), labels = c("Non-Diabetic", "Diabetic")))

# Fit a logistic regression model for diabetes risk prediction
model <- glm(Outcome ~ Age + Pregnancies + BMI + Glucose, data = diabetes_data, family = "binomial")

# UI
ui <- fluidPage(
  titlePanel("Type 2 Diabetes Risk Interface"),
  tags$br(),
  
  # Introductory Text
  fluidRow(
    column(12, 
           h3("Understanding Diabetes and the Dataset"),
           tags$p("This app uses data on various health metrics to assess diabetes risk and provide insights. 
                  The dataset is based on individuals of Pima Indian heritage, examining attributes like age, 
                  BMI, and glucose levels to identify potential diabetes risk factors.")
    )
  ),
  
  # Tabbed layout for visualizations and risk calculator
  tabsetPanel(
    tabPanel("Visualizations",
             sidebarLayout(
               sidebarPanel(
                 h4("Interactive Visualizations"),
                 selectInput("feature", "Select Feature:", 
                             choices = c("BMI", "Glucose", "BloodPressure", "Age"))
               ),
               mainPanel(
                 fluidRow(
                   column(6, plotlyOutput("boxPlot")),  # Boxplot on the left
                   column(6, plotlyOutput("histPlot"))  # Histogram on the right
                 ),
                 fluidRow(
                   column(12, plotlyOutput("pregnancyViolinPlot"))  # Violin plot for pregnancies
                 )
               )
             )
    ),
    
    tabPanel("Diabetes Risk Calculator",
             sidebarLayout(
               sidebarPanel(
                 h4("Risk Calculator"),
                 numericInput("input_age", "Age:", 30, min = 1, max = 120),
                 numericInput("input_pregnancies", "Number of Pregnancies:", 1, min = 0),
                 numericInput("input_BMI", "BMI:", 25, min = 0),
                 numericInput("input_glucose", "Glucose Level:", 100, min = 0),
                 actionButton("calc_risk", "Calculate Diabetes Risk")
               ),
               mainPanel(
                 h4("Estimated Diabetes Risk:"),
                 textOutput("riskOutput")
               )
             )
    )
  )
)

# Server
server <- function(input, output) {
  # Boxplot Visualization
  output$boxPlot <- renderPlotly({
    feature <- input$feature
    p <- ggplot(diabetes_data, aes(x = Outcome, y = .data[[feature]], fill = Outcome)) +
      geom_boxplot() +
      labs(
        title = paste("Boxplot of", feature, "by Diabetic Status"),
        x = "Diabetes Status",
        y = feature,
        fill = "Diabetes Status"
      ) +
      scale_fill_manual(
        values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
      ) +
      theme_minimal() + 
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })
  
  # Histogram with Density Plot
  output$histPlot <- renderPlotly({
    feature <- input$feature
    p <- ggplot(diabetes_data, aes_string(x = feature, fill = "Outcome")) +
      geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5, bins = 30) +
      geom_density(alpha = 0.7) +
      labs(
        title = paste("Distribution of", feature, "by Diabetic Status"),
        x = feature,
        y = "Density",
        fill = "Diabetes Status"
      ) +
      scale_fill_manual(
        values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
      ) +
      theme_minimal() + 
      theme(legend.position = "bottom")
    
    ggplotly(p)
  })
  
  # Violin Plot with Jittered Points for Number of Pregnancies
  output$pregnancyViolinPlot <- renderPlotly({
    p <- ggplot(diabetes_data, aes(x = Outcome, y = Pregnancies, fill = Outcome)) +
      geom_violin(trim = FALSE, alpha = 0.5) +
      geom_jitter(aes(text = paste("Number of Pregnancies:", Pregnancies)), 
                  color = "black", width = 0.2, alpha = 0.6) +
      labs(
        title = "Distribution of Pregnancies by Diabetic Status",
        x = "Diabetes Status",
        y = "Number of Pregnancies",
        fill = "Diabetes Status"
      ) +
      scale_fill_manual(
        values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
      ) +
      theme_minimal() + 
      theme(legend.position = "bottom")
    
    ggplotly(p, tooltip = "text")
  })
  
  # Risk Calculation based on user input
  observeEvent(input$calc_risk, {
    new_data <- data.frame(
      Age = input$input_age,
      Pregnancies = input$input_pregnancies,
      BMI = input$input_BMI,
      Glucose = input$input_glucose
    )
    
    # Predict probability
    risk <- predict(model, newdata = new_data, type = "response")
    output$riskOutput <- renderText({
      paste0("Your estimated risk of diabetes is ", round(risk * 100, 2), "%.")
    })
  })
}

# Run the application 
shinyApp(ui = ui, server = server)

