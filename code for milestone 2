library(shiny)
library(ggplot2)
library(dplyr)
library(plotly)
library(caret)

# Load and preprocess dataset
diabetes_data <- read.csv("https://uwmadison.box.com/shared/static/k6ph975j7qifhhxbcebzw0zirsol39yv")
diabetes_data <- diabetes_data %>%
  filter(across(c(Glucose, BloodPressure, SkinThickness, Insulin, BMI, Age, DiabetesPedigreeFunction), ~ . != 0)) %>%
  mutate(Outcome = factor(Outcome, levels = c(0, 1), labels = c("Non-Diabetic", "Diabetic")))
model <- glm(Outcome ~ Age + Pregnancies + BMI + Glucose, data = diabetes_data, family = "binomial")

# UI
ui <- fluidPage(
  titlePanel("Type 2 Diabetes Risk Interface"),
  
  fluidRow(
    column(12, 
           h3("Understanding and Predicting Diabetes"),
           tags$p("This interactive tool helps users assess diabetes risk by examining key health factors like BMI, glucose, age, and pregnancies."),
           tags$p("The dataset used here is from the Pima Indian heritage study and focuses on metrics that are highly correlated with diabetes risk. Explore the 'Visualizations' tab to compare diabetic and non-diabetic individuals on various health metrics."),
           tags$p("In the 'Diabetes Risk Calculator' tab, you can input personal information to receive a risk estimate.")
    )
  ),
  
  # Tabbed layout for visualizations and risk calculator
  tabsetPanel(
    tabPanel("Visualizations",
             sidebarLayout(
               sidebarPanel(
                 h4("Explore Data by Feature"),
                 selectInput("feature", "Select Feature:", 
                             choices = c("BMI", "Glucose", "BloodPressure", "Age")),
                 tags$p("Select a health metric to view its distribution across diabetic and non-diabetic groups.")
               ),
               mainPanel(
                 fluidRow(
                   column(6, plotlyOutput("boxPlot")), 
                   column(6, plotlyOutput("histPlot")) 
                 ),
                 fluidRow(
                   column(12, plotlyOutput("pregnancyDensityPlot"))
                 )
               )
             )
    ),
    
    tabPanel("Diabetes Risk Calculator",
             sidebarLayout(
               sidebarPanel(
                 width = 6,
                 h4("Calculate Your Diabetes Risk"),
                 numericInput("input_age", "Age:", NULL, min = 1, max = 120),
                 numericInput("input_pregnancies", "Number of Pregnancies:", NULL, min = 0),
                 numericInput("input_BMI", "BMI (Calculate at https://www.calculator.net/bmi-calculator.html):", NULL, min = 0),
                 numericInput("input_glucose", "Glucose Level (0-199 mg/dL):", NULL, min = 0, max = 199),
                 actionButton("calc_risk", "Calculate Diabetes Risk")
               ),
               mainPanel(
                 width = 6,
                 h4("Estimated Diabetes Risk:"),
                 uiOutput("riskOutput"),
                 uiOutput("riskAdvice")  # New output for advice based on risk level
               )
             )
    ),
    
    tabPanel("About Risk Calculation",
             fluidRow(
               column(12, 
                      h4("How is Diabetes Risk Calculated?"),
                      tags$p("This risk estimate is based on a logistic regression model trained on the Pima Indian Diabetes dataset."),
                      tags$ul(
                        tags$li("Logistic regression is used to model binary outcomes—in this case, the likelihood of diabetes."),
                        tags$li("Key factors include age, number of pregnancies, BMI, and glucose levels."),
                        tags$li("These factors have a significant association with diabetes risk, supported by research.")
                      ),
                      tags$p("The predicted risk percentage reflects the probability of diabetes based on patterns observed in the dataset."),
                      h5("Model Limitations"),
                      tags$p("The dataset focuses on Pima Indian women over 21 years old. Results may vary in different demographics. For personalized advice, consult a healthcare professional.")
               )
             )
    )
  )
)

#Functions for server
# Box plot function for selected feature
box_plot_func <- function(feature) {
  p <- ggplot(diabetes_data, aes(x = Outcome, y = .data[[feature]], fill = Outcome)) +
    geom_boxplot() +
    labs(
      title = paste("Boxplot of", feature, "by Diabetic Status"),
      x = "Diabetes Status (Non-Diabetic or Diabetic)",
      y = feature,
      fill = "Diabetes Status"
    ) +
    scale_fill_manual(
      values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
    ) +
    theme_minimal() + 
    theme(legend.position = "bottom", 
          plot.title = element_text(size = 12))
  
  ggplotly(p)
}

# Density plot function for selected feature
hist_plot_func <- function(feature) {
  p <- ggplot(diabetes_data, aes_string(x = feature, fill = "Outcome")) +
    geom_histogram(aes(y = ..density..), position = "identity", alpha = 0.5, bins = 30) +
    geom_density(alpha = 0.6) +
    labs(
      title = paste("Distribution of", feature, "by Diabetic Status"),
      x = feature,
      y = "Density",
      fill = "Diabetes Status"
    ) +
    scale_fill_manual(
      values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
    ) +
    theme_minimal() + 
    theme(legend.position = "bottom", 
          plot.title = element_text(size = 12))
  
  ggplotly(p)
}

# Density plot function for pregnancies
pregnancy_density_plot_func <- function() {
  p <- ggplot(diabetes_data, aes(x = Pregnancies, fill = Outcome)) +
    geom_density(alpha = 0.6) +
    labs(
      title = "Distribution of Number of Pregnancies by Diabetic Status",
      x = "Number of Pregnancies",
      y = "Density",
      fill = "Diabetes Status"
    ) +
    scale_fill_manual(
      values = c("Non-Diabetic" = "skyblue", "Diabetic" = "salmon")
    ) +
    theme_minimal() +
    theme(
      legend.position = "bottom",
      plot.title = element_text(size = 12, hjust = 0.5)
    )
  
  ggplotly(p)
}

# Risk calculation function with advice based on risk level
risk_calculation_func <- function(age, pregnancies, bmi, glucose) {
  new_data <- data.frame(
    Age = age,
    Pregnancies = pregnancies,
    BMI = bmi,
    Glucose = glucose
  )
  
  risk <- predict(model, newdata = new_data, type = "response")
  risk_percent <- round(risk * 100, 2)
  
  # Determine risk level and advice
  if (risk_percent < 25) {
    risk_level <- "Low"
    advice <- "Your estimated risk is low. Maintain a balanced diet, regular exercise, and annual health check-ups to keep your risk low."
    risk_color <- "green"
  } else if (risk_percent < 50) {
    risk_level <- "Moderate"
    advice <- "Your estimated risk is moderate. It’s advisable to monitor blood sugar levels, maintain a healthy weight, and engage in regular physical activity to help manage your risk."
    risk_color <- "orange"
  } else {
    risk_level <- "High"
    advice <- "Your estimated risk is high. Consult a healthcare provider for a comprehensive evaluation and guidance. Consider lifestyle changes, such as a low-sugar diet and increased physical activity."
    risk_color <- "red"
  }
  
  list(
    risk_text = paste0("Your estimated risk of diabetes is ", risk_percent, "% (", 
                       tags$span(style = paste0("color:", risk_color), risk_level), " Risk)."),
    advice = advice
  )
}

# Server
server <- function(input, output) {

  output$boxPlot <- renderPlotly({
    box_plot_func(input$feature)
  })
  
  output$histPlot <- renderPlotly({
    hist_plot_func(input$feature)
  })
  
  output$pregnancyDensityPlot <- renderPlotly({
    pregnancy_density_plot_func()
  })

  # Reactive risk calculation
  risk_estimate <- reactive({
    risk_calculation_func(input$input_age, input$input_pregnancies, input$input_BMI, input$input_glucose)
  })
  
  observeEvent(input$calc_risk, {
    output$riskOutput <- renderUI({
      HTML(risk_estimate()$risk_text)
    })
    output$riskAdvice <- renderUI({
      tags$p(risk_estimate()$advice)
    })
  })
}

shinyApp(ui = ui, server = server)
